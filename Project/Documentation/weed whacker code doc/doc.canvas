{
	"nodes":[
		{"id":"fc1f9e8a38e266ec","type":"text","text":"wave system - ","x":423,"y":-472,"width":250,"height":60,"color":"3"},
		{"id":"079eee99acf583d2","type":"text","text":"spawn weeds","x":423,"y":-360,"width":250,"height":60,"color":"3"},
		{"id":"8d47bd5b63950893","type":"text","text":"spawn flowers","x":427,"y":-260,"width":250,"height":60,"color":"3"},
		{"id":"231a3bb1808ca8b4","type":"text","text":"## Game Logic Master","x":128,"y":-484,"width":214,"height":84,"color":"2"},
		{"id":"3131d0b26c55e286","type":"text","text":"## Player","x":35,"y":-97,"width":250,"height":60,"color":"2"},
		{"id":"a59903a1884f00f9","type":"text","text":"movement - player can use stick to walk in 8 directions\n","x":370,"y":-120,"width":250,"height":125,"color":"3"},
		{"id":"369931788707d2ed","type":"text","text":"in update function, set velocity of rigidbody equal the vector2 held by input manager's move value","x":721,"y":-120,"width":400,"height":95,"color":"4"},
		{"id":"80fc41cfe8ca36df","type":"text","text":"press any button to play - because this game isnt monetized, rather than waiting for a player to insert coins and press play, display a prompt for the player to hit their respective attack button to start the game. when done, the screen will freeze, and a new game will start. ","x":1660,"y":-260,"width":402,"height":188,"color":"3"},
		{"id":"8f97720fd92294c8","type":"text","text":"looping video - similar to old arcade games, have a video play to preview the game. have a splash screen show up, then show a video of gameplay. this then loops.","x":1660,"y":-472,"width":350,"height":159,"color":"3"},
		{"id":"1e876faa0c091a95","type":"text","text":"## Demo screen","x":1300,"y":-472,"width":250,"height":60,"color":"2"},
		{"id":"2110eaa3352fb1f0","type":"text","text":"take damage/get knocked - when hit by an enemy, if damage taken meets or exceeds remaining health, player will go into knocked state. if not, then enemy's damage done is subtracted from player's health, they are sent in the direction the enemy's attack designates, and are placed in a temporary invulnerable state where they can still attack and are still chased by enemies, but they will take no damage until invulnerable state ends.","x":324,"y":446,"width":368,"height":139,"color":"3"},
		{"id":"2bcf67139e148aab","type":"text","text":"run code that gets the position of the attacking weed. then, set the velocity to the attacker's knockbackSpeed (should be defined in their attatched script). also, have an animation called justHit that oscillates player's sprite color to indicate invincibility for a short period, and that also disables the player's hurtbox. upon invincibility expiration, reenable player's hurtbox.","x":738,"y":446,"width":460,"height":208,"color":"4"},
		{"id":"1fc9f557d4e5add9","type":"text","text":"knocked state - player's movement is slowed and cannot attack; enemies will ignore a knocked player. can be revived by other player through simply keeping contact for a certain amount of time.","x":341,"y":654,"width":334,"height":180,"color":"3"},
		{"id":"61e189a3c6b3e017","type":"text","text":"when transitioning to knocked state, player will have moveSpeed set to knockedStateMoveSpeed (defined in playerScript). when revived and state is returned to standingState, set moveSpeed back to standingMoveSpeed.","x":764,"y":666,"width":395,"height":180,"color":"4"},
		{"id":"d08fe95bb6d51225","type":"text","text":"## Village Well\n","x":-35,"y":1527,"width":250,"height":60,"color":"2"},
		{"id":"023bf72108ed0e0e","type":"text","text":"## Enemy\n","x":-15,"y":906,"width":250,"height":60,"color":"2"},
		{"id":"f388d2ec10606ad3","type":"text","text":"take damage - when hit by player, sent backwards, and takes damage; if damage receieved meets or exceeds remaining health, play death animation and delete self from scene","x":292,"y":1231,"width":346,"height":140,"color":"3"},
		{"id":"44a4ba7830feb898","type":"text","text":"attack - when near target, play bite animation. on hit, if target was originally not the player, then return to pursuing original target. ","x":321,"y":1046,"width":284,"height":118,"color":"3"},
		{"id":"46ef95b5d7fab0e8","type":"text","text":"chase - moves in direction of either a flower, player, or well; when hit by player, changes target to player","x":324,"y":906,"width":281,"height":120,"color":"3"},
		{"id":"84afde37179f223c","type":"text","text":"take damage - when enemy nearby drinks from well, lower remaining water count and update HUD; if water taken meets or exceeds remaining water...","x":344,"y":1486,"width":342,"height":141,"color":"3"},
		{"id":"633f780230205c5a","type":"text","text":"game end - if water taken meets or exceeds remaining water, then tell gameLogicMaster about it","x":430,"y":1666,"width":256,"height":100,"color":"3"},
		{"id":"d072b3c84fa272a9","type":"text","text":"on entry, is given a target by game manager: player, flower, or well. this is stored as originalTargetObject. also set currentTargetObject to equal originalTargetObject. use math to set velocity to aim towards target and move at moveSpeed. when hit by player, change currentTargetObject to the player that hit it. when in range... ","x":650,"y":906,"width":415,"height":191,"color":"4"},
		{"id":"56d91fa466ece063","type":"text","text":"knockback and damage recieved should be defined in playerScript. upon trigger, find the tied object's damage, knockback and position, and apply accordingly.","x":686,"y":1249,"width":313,"height":137,"color":"4"},
		{"id":"7b2452a5f658616b","type":"text","text":"play an attack animation. if the attack lands and the weed's original target was NOT the player, then set currentTargetObject to originalTargetObject.","x":705,"y":1097,"width":340,"height":134,"color":"4"},
		{"id":"eec54400b87b9445","type":"text","text":"this method is used to future proof in case more weapons are added; by asking the attacking player object what value to use, less work will be required for that possible feature. ","x":1065,"y":1386,"width":340,"height":101,"color":"4"},
		{"id":"58f4bbbe72134bc0","type":"text","text":"have player object have child that is collider2d with hitbox tag. have its collision disabled by default. create animation that sets this collider as active for a few frames, then make it inactive again. \npressing the attack button calls an event that plays this animation. ","x":725,"y":240,"width":473,"height":161,"color":"4"},
		{"id":"ee3336d70fcb9ea4","type":"text","text":"attack - player can use button to swing shovel in last pressed direction (eg shovel is swung up and to the left if player is currently moving up and to the left, or if player is still and their last held direction was up and to the left)","x":318,"y":273,"width":309,"height":128,"color":"3"},
		{"id":"c900fae0e49dd2b6","type":"text","text":"sprite flip - player object will flip on the x axis depending on last direction hit","x":590,"y":60,"width":271,"height":93,"color":"3"},
		{"id":"3c444a894fca7188","type":"text","text":"","x":929,"y":82,"width":250,"height":60,"color":"4"},
		{"id":"16859d54235eef1a","type":"text","text":"## Game manager","x":1300,"y":27,"width":280,"height":55,"color":"2"},
		{"id":"a625ea0070a12640","type":"text","text":"wave system\n","x":1710,"y":27,"width":250,"height":60,"color":"3"},
		{"id":"8e8fd9ecce87aba6","type":"text","text":"spawn weed - a function that spawns a weed at a random predetermined spawner, and gives it a target to find.\n","x":1710,"y":180,"width":250,"height":141,"color":"3"},
		{"id":"9af4f30a14960111","type":"text","text":"","x":2062,"y":180,"width":250,"height":60,"color":"4"},
		{"id":"b55682901c84faa9","type":"text","text":"","x":2040,"y":27,"width":250,"height":60,"color":"4"},
		{"id":"e2a78b0cc4a2a8cc","type":"file","file":"game flow.md","x":308,"y":-1010,"width":413,"height":350,"color":"1"},
		{"id":"29458bbc5d4fa280","type":"text","text":"# weed whacker","x":1030,"y":-1240,"width":270,"height":80,"color":"1"},
		{"id":"9a2c249e4e353a75","type":"text","text":"","x":905,"y":-1240,"width":73,"height":80,"color":"1"},
		{"id":"12586350f7388b50","type":"text","text":"","x":1365,"y":-1240,"width":73,"height":80,"color":"1"},
		{"id":"ccdf3b22385399c5","type":"text","text":"Expected Behaviours\n--","x":895,"y":-600,"width":317,"height":60,"color":"2"},
		{"id":"709dabf3f91a4e01","type":"text","text":"### player state machine\nthere is a universal state machine located in the scripts folder. it consists of two abstract classes stored as two different scripts; StateMachine and BaseState. \nall entities that have states should have a state machine that inherits from StateMachine, and their respective states should inherit from BaseState. \nwhen inheriting, make sure to replace the generic with a user created enum type to allow for type safety (fig. 1)","x":1054,"y":-1062,"width":645,"height":227,"color":"4"},
		{"id":"3bdbbe745970ce30","type":"text","text":"public class PlayerStateMachine : StateManager<PlayerStateMachine.PlayerState>\n{\n    public enum PlayerState\n\t{\n\t\tIdle,\n\t\tWalk,\n\t\tRun\n\t}\n\tvoid Awake() \n\t{\n\t\tCurrentState = States[PlayerState.Idle];\n\t}\n}","x":1740,"y":-1062,"width":819,"height":360,"color":"5"},
		{"id":"6b523fc0b758c606","type":"text","text":"when either side is pressed, have that respective side either start or join the game, depending if the game's already started or not. if a side is already dead, then they can no longer join for the remainder of the game.","x":2400,"y":-295,"width":400,"height":270,"color":"3"},
		{"id":"e47a1e449886c8d1","type":"text","text":"## Multiplayer manager\n","x":2417,"y":-491,"width":366,"height":79,"color":"2"},
		{"id":"503e813990c14e30","type":"text","text":"SO. kinda roundabout solution. theres proly a better way to do this but OH WELL I DO NOT CARE THIS IS A SCHOOL PROJECT. I DONT GIVE A FUCK\nthe mains scene (as far as Unity is concerned) is gonna be called On Startup. self explanatory. its an ominous balck screen that asks the user to hit the button for player 1 (left side). after doing so, it creates a playerSpawner object that is assigned to that controller using the Player Input Manager; THIS IS DONOTDESTROYONLOAD.  it then asks for player 2 (right side). this is also DONOTDESTROYONLOAD! then, it loads the demo scene; atp each controller is assigned to a side, and will remain as such for the entire session. since this is in an arcade setting, this should only have to be done at the beginning of the day, only having to be redone if the machine is like unplugged or sm.  ","x":2460,"y":57,"width":460,"height":498,"color":"4"},
		{"id":"f0ddc6a691242cea","type":"text","text":"| playerGuardianAngel.cs                                                                                                                                                  | guardianAngelJoinBehavior.cs                                               |\n| ----------------------------------------------------------------------------------------------------------------------------------------------------------------------- | -------------------------------------------------------------------------- |\n| - is spawned by playerControllerController in the onStartupScreen<br>- when the demo screen is loaded, then adds the guardianAngelJoinBehavior.cs script as a component | - handles actually spawning its player instance and assigning its controls |","x":3060,"y":87,"width":726,"height":396,"color":"3"},
		{"id":"e258ee2391ee1356","type":"text","text":"-> setup screen asks for each controller to be pressed in turn\n-> when the first controller is pressed, the playerControllerController's player input manager component spawns an instance of [player guardian angel], which upon startup:\n--> tags itself as DontDestroyOnLoad\n--> grabs a reference to the playerControllerController object and calls it controllerController (this is done in the start function, so that when the scene inevitably changes, unity wont fucking shit itself and cry about a null reference)\n--> checks if it is player 1 or 2:\n---> if player 1, then sets its name to \"player 1 guardian angel\", then tells the playerControllerController to run nowForPlayer2()\n---> if player 2, then sets its name to \"player 2 guardian angel\", then tells the playerControllerController to run bothPlayersIn()\n-> nowForPlayer2 changes the startup screen text to now prompt the end user to press a button on player 2's controller, in order to assign it\n-> both players in then loads the demo screen; the demo screen loops a video of gameplay, mimicking a real arcade\n-> if either controller is pressed, then have the demo screen run transitionToReal(). this take a screencap of the current frame, \n","x":3163,"y":-487,"width":520,"height":348,"color":"3"},
		{"id":"55eb65253b0546fa","x":3840,"y":-442,"width":260,"height":82,"color":"4","type":"text","text":"### startup screen"},
		{"id":"2661f3bb2c268c8a","x":4120,"y":-442,"width":260,"height":82,"color":"4","type":"text","text":"### demo screen\n"},
		{"id":"ba1ee3dfc902e52a","x":4400,"y":-442,"width":260,"height":82,"color":"4","type":"text","text":"### debug scene"},
		{"id":"3d201cfc9018d615","x":3840,"y":-313,"width":250,"height":60,"type":"text","text":""},
		{"id":"8858633ca2a1ea9e","x":4125,"y":-313,"width":250,"height":60,"type":"text","text":"- player guardian angel"},
		{"id":"e44e2760d9ab2298","x":4405,"y":-313,"width":250,"height":60,"type":"text","text":""}
	],
	"edges":[
		{"id":"2b4df40118e4fee8","fromNode":"3131d0b26c55e286","fromSide":"right","toNode":"ee3336d70fcb9ea4","toSide":"left"},
		{"id":"11062a75cee85d3a","fromNode":"3131d0b26c55e286","fromSide":"right","toNode":"a59903a1884f00f9","toSide":"left"},
		{"id":"f25ac6c9c4b5bbca","fromNode":"3131d0b26c55e286","fromSide":"right","toNode":"2110eaa3352fb1f0","toSide":"left"},
		{"id":"e730992254a1d795","fromNode":"2110eaa3352fb1f0","fromSide":"bottom","toNode":"1fc9f557d4e5add9","toSide":"top"},
		{"id":"2ac627d158b28c6d","fromNode":"3131d0b26c55e286","fromSide":"right","toNode":"1fc9f557d4e5add9","toSide":"left"},
		{"id":"4b43276f918fc9de","fromNode":"023bf72108ed0e0e","fromSide":"right","toNode":"46ef95b5d7fab0e8","toSide":"left"},
		{"id":"ff1bb81a047e68ac","fromNode":"023bf72108ed0e0e","fromSide":"right","toNode":"44a4ba7830feb898","toSide":"left"},
		{"id":"ee8843f12ce4bf68","fromNode":"023bf72108ed0e0e","fromSide":"right","toNode":"f388d2ec10606ad3","toSide":"left"},
		{"id":"41fcd40c41855f4e","fromNode":"d08fe95bb6d51225","fromSide":"right","toNode":"84afde37179f223c","toSide":"left"},
		{"id":"41b205b32d5f5cae","fromNode":"46ef95b5d7fab0e8","fromSide":"bottom","toNode":"44a4ba7830feb898","toSide":"top","fromEnd":"arrow"},
		{"id":"797adf776ee946ad","fromNode":"d08fe95bb6d51225","fromSide":"right","toNode":"633f780230205c5a","toSide":"left"},
		{"id":"056de61578a14c9c","fromNode":"a59903a1884f00f9","fromSide":"right","toNode":"369931788707d2ed","toSide":"left"},
		{"id":"d958737e6d185c6b","fromNode":"ee3336d70fcb9ea4","fromSide":"right","toNode":"58f4bbbe72134bc0","toSide":"left"},
		{"id":"aa80547fca33ac16","fromNode":"1fc9f557d4e5add9","fromSide":"right","toNode":"61e189a3c6b3e017","toSide":"left"},
		{"id":"10ed2450aef21862","fromNode":"2110eaa3352fb1f0","fromSide":"right","toNode":"2bcf67139e148aab","toSide":"left"},
		{"id":"8f9586e8f11c1dba","fromNode":"46ef95b5d7fab0e8","fromSide":"right","toNode":"d072b3c84fa272a9","toSide":"left"},
		{"id":"652d137b346439cb","fromNode":"d072b3c84fa272a9","fromSide":"bottom","toNode":"7b2452a5f658616b","toSide":"top"},
		{"id":"75ddcec9fe892bff","fromNode":"44a4ba7830feb898","fromSide":"right","toNode":"7b2452a5f658616b","toSide":"left"},
		{"id":"7af4f58ef6f7b49a","fromNode":"f388d2ec10606ad3","fromSide":"right","toNode":"56d91fa466ece063","toSide":"left"},
		{"id":"05e625bc901c2abe","fromNode":"84afde37179f223c","fromSide":"bottom","toNode":"633f780230205c5a","toSide":"top"},
		{"id":"0903dc9277931f44","fromNode":"231a3bb1808ca8b4","fromSide":"right","toNode":"fc1f9e8a38e266ec","toSide":"left"},
		{"id":"5863516101ea36d3","fromNode":"231a3bb1808ca8b4","fromSide":"right","toNode":"079eee99acf583d2","toSide":"left"},
		{"id":"b8f7554613a11a28","fromNode":"231a3bb1808ca8b4","fromSide":"right","toNode":"8d47bd5b63950893","toSide":"left"},
		{"id":"4f8b88fdc869829d","fromNode":"709dabf3f91a4e01","fromSide":"right","toNode":"3bdbbe745970ce30","toSide":"left","label":"fig. 1"},
		{"id":"fd7c0fe91527d2b5","fromNode":"1e876faa0c091a95","fromSide":"right","toNode":"80fc41cfe8ca36df","toSide":"left"},
		{"id":"3d2f43559c10ac91","fromNode":"1e876faa0c091a95","fromSide":"right","toNode":"8f97720fd92294c8","toSide":"left"},
		{"id":"b982fee0f1f57e78","fromNode":"a59903a1884f00f9","fromSide":"bottom","toNode":"c900fae0e49dd2b6","toSide":"left"},
		{"id":"788f8920ceadba43","fromNode":"c900fae0e49dd2b6","fromSide":"right","toNode":"3c444a894fca7188","toSide":"left"},
		{"id":"05e11a411a0c0a13","fromNode":"16859d54235eef1a","fromSide":"right","toNode":"a625ea0070a12640","toSide":"left"},
		{"id":"e05d9f382071b4e8","fromNode":"16859d54235eef1a","fromSide":"right","toNode":"8e8fd9ecce87aba6","toSide":"left"},
		{"id":"18e11e50f44f746c","fromNode":"a625ea0070a12640","fromSide":"bottom","toNode":"8e8fd9ecce87aba6","toSide":"top"},
		{"id":"275b1e4b745a7ac3","fromNode":"a625ea0070a12640","fromSide":"right","toNode":"b55682901c84faa9","toSide":"left"},
		{"id":"5a0b59bbf718ce72","fromNode":"8e8fd9ecce87aba6","fromSide":"right","toNode":"9af4f30a14960111","toSide":"left"},
		{"id":"8fba975c8f146884","fromNode":"80fc41cfe8ca36df","fromSide":"right","toNode":"e47a1e449886c8d1","toSide":"left"},
		{"id":"c0e70dca21c8f378","fromNode":"e47a1e449886c8d1","fromSide":"bottom","toNode":"6b523fc0b758c606","toSide":"top"},
		{"id":"31248305b16f7c74","fromNode":"6b523fc0b758c606","fromSide":"bottom","toNode":"503e813990c14e30","toSide":"top"},
		{"id":"7ac97c158067ecd3","fromNode":"e47a1e449886c8d1","fromSide":"bottom","toNode":"e258ee2391ee1356","toSide":"top"},
		{"id":"a2f06c601b545996","fromNode":"e258ee2391ee1356","fromSide":"bottom","toNode":"f0ddc6a691242cea","toSide":"top"}
	]
}